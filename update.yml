---
- hosts: all
  vars:
    exclude_packages: ""
    reboot_timeout: 300 
    security: no
  become: yes 
  tasks:  
  - block:
      - name: upgrade all packages (yum)
        yum:
          name: '*'
          state: latest
          exclude: "{{ exclude_packages }}"
          security: "{{ security }}"
        when: ansible_pkg_mgr == "yum"

      - name: upgrade all packages (dnf)
        dnf:
          name: '*'
          state: latest
          exclude: "{{ exclude_packages }}"
          security: "{{ security }}"
        when: ansible_pkg_mgr == "dnf"

      - name: Gathering Package Facts
        package_facts:
            
      - name: set fact (kernel_latest_dict)
        set_fact:
          kernel_latest_dict: "{{ ansible_facts.packages['kernel-core'] | sort(attribute='release') | first }}"

      - name: set fact (kernel_latest)
        set_fact:
          kernel_latest: "{{ kernel_latest_dict.version }}-{{ kernel_latest_dict.release }}.{{ kernel_latest_dict.arch }}"

      - debug:
          var: ansible_kernel
      
      - debug:
          var: kernel_latest

      - name: reboot when kernel update is available
        reboot:
          reboot_timeout: "{{ reboot_timeout }}"
        when: not kernel_latest == ansible_kernel

    when: ansible_os_family == "RedHat"

  - block:
      - name: Update apt-get repo and cache
        apt: 
          update_cache: yes 
          force_apt_get: yes 
          cache_valid_time: 3600

      - name: Gathering Package Facts
        package_facts:
            
      - name: set fact (kernel_latest_dict)
        set_fact:
          kernel_latest_dict: "{{ ansible_facts.packages['kernel-core'] | sort(attribute='release') | first }}"

      - name: set fact (kernel_latest)
        set_fact:
          kernel_latest: "{{ kernel_latest_dict.version }}-{{ kernel_latest_dict.release }}.{{ kernel_latest_dict.arch }}"

      - debug:
          var: ansible_kernel
      
      - debug:
          var: kernel_latest

      - name: reboot when kernel update is available
        reboot:
          reboot_timeout: "{{ reboot_timeout }}"
        when: not kernel_latest == ansible_kernel

    when: ansible_os_family == "Debian"